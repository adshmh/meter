# TODO: use an init container (as a service) to:
# 1) untar/unzip the influx csv data
# 2) import InfluxDB data
# 3) init postgres db schema
#
version: "3.9"
services:
  # Source database, i.e. influx
  db:
    image: influxdb:2.3-alpine
    volumes:
      - ./testdata/db_data:/var/lib/influxdb2
      # config is mapped to make it persistent (making the master token available on subsequent starts of the db container): otherwise, 
      #   since the setup will skip because of existing data directory, tokens used in the existing db will be lost,
      #   making it impossible to access the existing db.
      - ./testdata/db_config:/etc/influxdb2
      # Running initial population script on first database boot
      - ./db_init_script.sql.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: my-user
      DOCKER_INFLUXDB_INIT_PASSWORD: my-password
      DOCKER_INFLUXDB_INIT_ORG: my-org
      DOCKER_INFLUXDB_INIT_BUCKET: my-bucket
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: my-super-secret-auth-token
  # TODO: have the import script (on a simple alpine image) extract the zipped data (or some other way of importing)
  influx_importer:
    build: ./db-importer
    depends_on:
      - "db"
    volumes:
      - ./db-importer/scripts:/scripts
      - ./db-importer/data:/data
      - ./db-importer/status:/status
    environment:
      INFLUXDB_TOKEN: my-super-secret-auth-token
      INFLUXDB_URL: http://db:8086
      INFLUXDB_ORG: "my-org"
      INFLUXDB_BUCKET_DAILY: "mainnetRelayApp1d"
      INFLUXDB_BUCKET_CURRENT: "mainnetRelayApp10m"
      INFLUXDB_ORIGIN_BUCKET_DAILY: "mainnetOrigin1d"
      INFLUXDB_ORIGIN_BUCKET_CURRENT: "mainnetOrigin60m"
      INFLUXDB_HEALTH_ENDPOINT: "http://db:8086/health"
      STATUS_FILE: "/status/influxImportDone"
  # postgres used as backend database to store metric summaries
  pg:
    image: postgres:14.4-alpine3.16
    # user and group of 1000:1000 is specified to avoid setting data dir ownership to root by the postgres container.
    user: 1000:1000
    volumes:
      - ./testdata/pg:/var/lib/postgresql/data/pgdata
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_USER: relaymeter
      POSTGRES_PASSWORD: my-password
      POSTGRES_DB: relaysummary
  pg_setup:
    build: ./postgres_setup
    depends_on:
      - "pg"
    volumes:
      - ./db-importer/scripts:/scripts
      - ./db-importer/data:/data
      - ./db-importer/status:/status
    environment:
      POSTGRES_HOST: pg
      POSTGRES_PORT: 5432
      POSTGRES_USER: relaymeter
      POSTGRES_PASSWORD: my-password
      POSTGRES_DB: relaysummary
      STATUS_FILE: "/status/postgresSetupDone"
  collector:
    build:
      context: ./
      dockerfile: ./Dockerfile.collector
    environment:
      INFLUXDB_TOKEN: my-super-secret-auth-token
      INFLUXDB_URL: http://db:8086
      INFLUXDB_ORG: "my-org"
      INFLUXDB_BUCKET_DAILY: "mainnetRelayApp1d"
      INFLUXDB_BUCKET_CURRENT: "mainnetRelayApp10m"
      INFLUXDB_ORIGIN_BUCKET_DAILY: "mainnetOrigin1d"
      INFLUXDB_ORIGIN_BUCKET_CURRENT: "mainnetOrigin60m"
      INFLUX_HEALTH_ENDPOINT: "http://db:8086/health"
      POSTGRES_HOST: pg
      POSTGRES_PORT: 5432
      POSTGRES_USER: relaymeter
      POSTGRES_PASSWORD: my-password
      POSTGRES_DB: relaysummary
      # Env var to ensure import task is done.
      STATUS_FILE_INFLUX: "/status/influxImportDone"
      STATUS_FILE_POSTGRES: "/status/postgresSetupDone"
      # Collector options
      COLLECTION_INTERVAL_SECONDS: 30
      ENV_REPORT_INTERVAL_SECONDS: 10
      # volumes:
      # not needed: the Dockerfile.collector will pull the github repo (@version) and build it.
      # - ./:/go/src/github.com/pokt-foundation/relay-meter/tests/e2e
      # - ./scripts:/scripts
      # - ./bin:/app
      # - ./db-importer/status:/status
  apiserver:
    build:
      context: ./
      dockerfile: ./Dockerfile.apiserver
    environment:
      POSTGRES_HOST: pg
      POSTGRES_PORT: 5432
      POSTGRES_USER: relaymeter
      POSTGRES_PASSWORD: my-password
      POSTGRES_DB: relaysummary
      # Env var to ensure import task is done.
      STATUS_FILE_POSTGRES: "/status/postgresSetupDone"
      # api server settings
      API_SERVER_PORT: 9898
    volumes:
      - ./scripts:/scripts
      - ./bin:/app
      - ./db-importer/status:/status
  #apiserver_client
